<?php

/**
 *  Implements hook_element_info().
 */
function uiid_element_info() {
  $elements['uiid'] = array(
    '#default_value' => '', // Initiate ['uiid']['value']
    '#input' => TRUE,
    '#process' => array('uiid_element_process'),
    '#theme' => array('uiid_field'),
    '#theme_wrappers' => array('form_element'),
    '#tree' => TRUE,
    // Custom properties
    '#uiid' => array(
      'source' => '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
      'min' => 5,
      'max' => 5,
      'unique_callback' => NULL,
      'generate_callback' => 'uiid_generate',
    ),
  );
  return $elements;
}

/**
 * Process callback for uiid element.
 */
function uiid_element_process($element, $form_state, $complete_form) {
  $id = 'uiid-' . sha1(implode('-', $element['#parents']));
  $element['value'] = array(
    '#type' => 'textfield',
    //'#required' => $element['#required'],
    '#title' => t('UIID'),
    '#title_display' => 'invisible',
    '#theme_wrappers' => array(),
    '#prefix' => '<span id="' . $id . '">',
    '#suffix' => "</span>",
  );

  if (isset($element['#default_value'])) {
    $element['value']['#default_value'] = $element['#default_value'];
  }

  $element['generate'] = array(
    '#type' => 'button',
    '#name' => $id . '-generate',
    '#value' => t('Generate'),
    '#ajax' => array(
      'callback' => 'uiid_generate_ajax',
      'wrapper' => $id,
    ),
    '#limit_validation_errors' => array(),
  );

  return $element;
}

/**
 * Ajax callback.
 */
function uiid_generate_ajax($form, $form_state) {
  $element = uiid_form_get_element($form, $form_state);
  if (function_exists($element['generate_callback'])) {
    $generate_callback = $element['generate_callback'];
  }
  else {
    $generate_callback = 'uiid_generate';
  }
  $element['value']['#value'] = $generate_callback($element['#uiid']);

  return $element['value'];
}

/**
 * Helper function to get the element for ajax callback.
 */
function uiid_form_get_element($form, $form_state) {
  $element = array();
  $array_parents = $form_state['triggering_element']['#array_parents'];
  // Remove the 'generate'.
  $array_parents = array_slice($array_parents, 0, -1);
  $element = drupal_array_get_nested_value($form, $array_parents);

  return $element;
}

/**
 * Value callback for uiid element.
 */
function form_type_uiid_value($element, $input = FALSE, &$form_state) {
  if ($input !== FALSE) {
    return $input;
  }
  elseif (!empty($element['#default_value'])) {
    return array(
      'value' => $element['#default_value']
    );
  }

  return;
}

/**
 *  Implements hook_theme().
 */
function uiid_theme($existing, $type, $theme, $path) {
  return array(
    'uiid_field' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme function for 'uiid_field'.
 *
 * Should this exist?
 */
function theme_uiid_field($variables) {
  $element = $variables['element'];
  $output = '';
  $output .= drupal_render($element['value']);
  $output .= "";
  $output .= drupal_render($element['generate']);

  return $output;
}

// =============================================================================
// Utility

/**
 * Helper function to generate uiid.
 */
function uiid_generate($uiid_settings) {
  extract($uiid_settings);
  $len = mt_rand($min, $max);
  $ret = '';
  $rand_max = strlen($source) - 1;
  for ($i = 0; $i < $len; $i++) {
    $ret .= $source[mt_rand(0, $rand_max)];
  }

  return $ret;
}
